1、列类型：
Char(n) 【定长字符串类型】 
Varchar2(n) 【可变长字符串类型】 
Number 【数值型】 
Date 【日期时间型】

2、创建表和约束
Create Table Student(
 S# Varchar2(10) Constraint PK Primary Key,
 Sname Varchar2(20) NOT NULL,
 Age Number(3) Constraint CK_S Check (age>14 and age<100),
 Sex Char(1) DEFAULT ’F'，

 Constraint UQ_S Unique(Sname), 
 Constraint CK_SS Check (Sex IN (‘M’,’F’))
)

3、插入一条记录
Insert Into Student(s#,sname,age) Values(‘001’,’John’,20)

日期数据插入
Insert Into Student Values(’s004’，’Rose’, 22, ‘F’, to_date(’11/08/1981’, ‘dd/mm/yyyy’));

4、约束：
定义主键：不许有空值，也不可重复，一个表只能有一个主键
唯一性约束：值不可重复，但可以为空
外键约束：
Create Table Student( 
 S# Varchar2(10)
 Constraint PK_S Primary Key, 
 Sname Varchar2(20), 
 Age  Number(3))

Create Table SC( －－选课表 
 S# Varchar2(10), 
 C# Varchar2(20), 
 Score Number(3) , )
 Constraint FK_SC Foreign Key(S#) References Student(S#) On Delete Cascade)

在子表中（如SC）插入记录时，若主表中对应的列值不存在，则插入出错；
删除主表中的记录时，若有子表中的相应记录存在，也出错。－－若设置了级联删除则不会出错

级联删除：删除主表中的记录时，同时删除子表中相关联的记录: On Delete Cascade
级联设空：删除主表中的记录时，同时将子表中相应记录的外键列值设为空: On Delete Set NULL

5、修改表
增加列：
Alter Table Student( 
 Add Dept Varchar2（10） Constraint UQ_S3 UNIQUE )

删除列：
Alter Table Student( 
 Drop Column age )

修改列：
Alter Table Student( 
 Modify age Integer NOT NULL )

重命名列：
Alter Table Student( Rename Column sex To gender )

增加约束：
Alter Table Student( 
 Add Constraint PK_Student Primary Key(S#) )

删除约束：
Alter Table SC(
 Drop Constraint FK_SC )

重命名表：
Alter Table SC( 
 Rename To course_selection )

删除表：
Drop Table Student Cascade Constraints
Cascade Constraints表示删除表时同时删除该表的所有约束

Update：
Update Student 
Set sex＝ ’ F ’ ，age＝23 
Where sname＝ ’ John ’

Update Student 
Set age＝age－1

Delete：
Delete From Student 
Where s# = ‘s001’

6、查询
Select <列名表> －－指定希望查看的列 
From <表名列表> －－指定要查询的表 
Where <条件> －－指定查询条件 
Group By <分组列名表> －－指定要分组的列 
Having <条件> －－指定分组的条件 
Order By <排序列名表> －－指定如何排序

Select * From Student *表示所有列

使用别名：
Select s# AS “Student Number” From Student

查询姓名的第一个字母为’R’并且倒数第二个字母为’S’的学生 
Select * From Student Where sname LIKE ’R%S_’
%：任意长度的字符串
 _：单个字符

多个比较式可用NOT、AND和OR连接 
Select * From Student Where age IS NULL and sname LIKE ‘R%’

去除重复记录：查询学生的姓名 
Select Distinct sname From Student

Select * From Student Order By age ASC, sname 
DESC ASC表示升序，DESC表示降序

使用聚集函数 
Count(列名)：对一列中的值计数 
Count(*)：计算记录个数 
SUM(列名)：求一列值的总和（数值） 
AVG (列名)：求一列值的平均值 
MIN (列名)：求一列值的最小值 
MAX (列名)：求一列值的最大值

查询男生和女生的平均年龄 
Select sex, AVG(age) as Average_age From Student Group By sex 
除聚集函数外的属性必须全部出现在Group By子句中

查询不同年龄的学生人数，并返回人数在5人以上的结果 
Select age, COUNT(*) as students From Student 
Group By age 
Having COUNT(*) > 5 
Having子句中必须聚集函数的比较式，而且聚集函数的比较式也只能通过Having子句给出

Having中的聚集函数可与Select中的不同： 
查询人数在60以上的各个班级的学生平均年龄 
Select class, AVG(age) From Student Group By class Having COUNT(*) > 60

连接查询：
三个表student，sc和course
Select student.s#, student.sname,sc.c# 
From student,sc 
Where student.s# = sc.s#

使用表别名
Select a.s#, b.sname, count(b.c#) as c_count 
From student a, sc b 
Where a.s# = b.s# and a.sex=‘M’ 
Group By a.s#, b.sname 
Order By student.s#

嵌套查询：
1）无关子查询： 父查询与子查询相互独立，子查询语句不依赖父查询中返回的任何记录，可以独立执行
查询没有选修课程的所有学生的学号和姓名 
Select s#,sname From student Where s# NOT IN (select distinct s# From sc)

2）相关子查询：相关子查询的结果依赖于父查询的返回值
查询选修了课程的学生学号和姓名 
Select s#, sname From student Where EXISTS (Select * From sc Where sc.s# = student.s#)

3）连接视图:子查询出现在From子句中作为表使用
查询只选修了1门或2门课程的学生学号、姓名和课程数 
Select s#, count_c# 
From (Select s#, count(c#) as count_c# From sc Group by s#) sc2, student s Where sc2.s# = s.s# and (count_c#=1 OR count_c#=2)

查询结果连接
查询课程平均成绩在90分以上或者年龄小于20的学生学号 
(Select s# From student where age<20) 
UNION 
(Select s# From (Select s#, AVG(score) 
From SC 
group by s# 
having avg(score)>90) SC2 )

UNION操作自动去除重复记录 ——Set Union
Union All操作不去除重复记录 ——Bag Union
Minus: 差
Intersect：返回结果的交集

视图：
是从一个或几个基本表中导出的虚拟表，其数据没有实际存储，但可以和表一样操作 
视图具有和表一样的逻辑结构定义 
但视图没有相应的存储文件，而每个表都有相应的存储文件

把每门课程的课程号和平均成绩定义为视图 
Create View c_view 
As Select c#, AVG(score) as avg_score From sc Group By c# 

Create View c_view (cno, avg_score) 
As Select c#, AVG(score) From sc Group By c#

若省略列名表，则必须为函数指定别名 若使用了列名表，则可以不指定函数的别名

视图更新：只有建立在单个表上，而且只是去掉了基本表的某些行和列，但保留了主键的视图才是可更新的
Update cs_view 
Set name=‘Rose’ 
Where s#=‘001’

视图删除：
Drop VIew cs_view
