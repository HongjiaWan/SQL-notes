1、数据库应用系统体系结构
根据商业服务层的工作位置不同：
以前端为主的两层式结构 
以后端为主的两层式结构 
三层式处理结构 
三层Internet处理结构 
多层Internet处理结构 
混合结构

2、数据库访问方法
早期的数据库访问方法ODBC：
Open DataBase Connectivity（ODBC）是微软公司倡导的、当前被业界广泛接受的、用于数据库访问的应用程序编程接口（API），它底层使用结构化查询语言（SQL）作为其数据库访问语言。

Java访问数据库的专用接口JDBC：
JDBC（Java DataBase Connectivity）是Java与数据库的接口规范，JDBC定义了一个支持标准SQL功能的通用低层的应用程序编程接口（API）。底层通过SQL访问数据库。 JDBC的设计思想与ODBC类似，但JDBC是与Java语言绑定的，所以不能用于其它编程语言。

目前流行的数据库访问模型ADO：
ActiveX Data Objects，即ActiveX数据对象。 ADO是微软新的通用数据存取框架。它包含了ODBC、数据库访问对象（DAO）、远程数据对象（RDO）及几乎所有其他数据存取方式的全部功能。 用户可以利用ADO连接SQL Server、Oracle及其他的数据源。

ADO编程总结
Connection对象用于创建到数据源的连接
Command对象可用于执行某个存储过程或SQL语句
Recordset对象可用于控制记录的增、删、改、查

数据库保护通过四个方面来实现：
1、完整性控制技术 Enable constraints 
2、安全性控制技术 Authorization and authentication 
3、数据库的恢复技术 Deal with failure 
4、并发控制技术 Deal with data sharing

1、完整性：
一条完整性规则是一个五元组（D,O,A,C,P） D(Data)：约束作用的数据对象 O(Operation)： 触发完整性检查的数据库操作。即当用户发出什么操作请求时需要检查该完整性规则，是立即检查还是延迟检查。 A(Assertion)： 数据对象要满足的断言或语义规则 C(Condition)： 受A作用的数据对象值的谓词 P(Procedure)：违反完整性规则时触发的过程

完整性实施途径：
1、约束
主键约束（Primary Key） 唯一键约束（Unique） 外键约束（Foreign Key） 检查约束（Check） 默认值约束（Default）
2、触发器
Update、Insert、Delete
3、规则
规则是一组用过程化SQL(如T-SQL*)书写的条件语句 Where子句中合法的语句一般都可以用作规则 算术运算符 关系运算符 IN、LIKE、BETWEEN等关键字
规则可以和列或用户定义类型捆绑在一起，检查数据完整性
多个列可以共用一个规则
4、断言
Create Assertion*创建一个断言，对断言涉及的数据进行操作时会触发断言；断言为假时操作将被拒绝


2、数据库安全性控制的常用方法：
用户标识和鉴定 密码存储 存取控制 视图 审计

存取控制（Access Control）机制的功能 
授权（Authorization） 对每个用户定义存取权限 
验证（Authentication） 对于通过鉴定获得上机权的用户（即合法用户），系统根据他的存取权限定义对他的各种操作请求进行控制，确保他只执行合法操作 
授权和验证机制一起组成了DBMS的安全子系统

常用存取控制方法 ：
1）、自主存取控制（Discretionary Access Control，简称DAC） C1级 灵活
同一用户对于不同的数据对象有不同的存取权限
不同的用户对同一对象也有不同的权限 

下面的示例给用户 Mary 和 John 授予多个语句权限。 
GRANT CREATE DATABASE, CREATE TABLE TO Mary, John
废除权限
REVOKE CREATE TABLE FROM Joe

2）、强制存取控制（Mandatory Access Control，简称 MAC） B1级 严格
每一个数据对象被标以一定的密级
每一个用户也被授予某一个级别的许可
对于任意一个对象，只有具有合法许可的用户才可以存取

对于主体和客体，DBMS为它们每个实例（值）指派一个敏感度标记（Label）
MAC机制就是通过对比主体的Label和客体的Label，最终确定主体是否能够存取客体
（1）仅当主体的存取级别大于或等于客体的密级时，该主体才能读取相应的客体；
（2）仅当主体的存取级别小于或等于客体的密级时，该主体才能写相应的客体。

视图机制：
把要保密的数据对无权存取这些数据的用户隐藏起来，
 视图机制更主要的功能在于提供数据独立性，其安全保护功能不够精细，往往远不能达到应用系统的要求
 实际中，视图机制与授权机制配合使用: 首先用视图机制屏蔽掉一部分保密数据 视图上面再进一步定义存取权限 间接实现了用户自定义的安全控制

3、故障恢复
Consistency of DB 可能由于故障而被破坏 
1）事务故障 
发生在单个事务内部的故障 
可预期的事务故障 即应用程序可以发现的故障，如转帐时余额不足。由应用程序处理 
非预期的事务故障 如运算溢出等，导致事务被异常中止。应用程序无法处理此类故障，由系统进行处理
2）介质故障 
硬故障（Hard Crash），一般指磁盘损坏
3）系统故障
系统故障：软故障（Soft Crash），由于OS、DBMS软件问题或断电等问题导致内存数据丢失，但磁盘数据仍在 影响所有正在运行的事务，破坏事务状态，但不破坏整个数据库

恢复策略：
基本原则 ：冗余（Redundancy）
实现方法
定期备份整个数据库 建立事务日志 (log) 通过备份和日志进行恢复

当发生故障时：
（1）若是介质故障，则首先重装副本
（2）利用日志进行事务故障恢复和系统故障恢复，一直恢复到故障发生点

先写日志(Write-Ahead Log)原则：在数据被写到磁盘之前，对应此修改的日志记录必须已被写到磁盘上

Undo日志总结
<T,x,v>记录修改前的旧值
写入<Commit,T>之前必须先将数据写入磁盘
恢复时忽略已提交事务，只撤销未提交事务

Undo基于立即更新 (Immediately Update)
Redo基于延迟更新 (Deferred Update)

基于Undo/Redo日志的恢复
正向扫描日志，将<commit>的事务放入Redo列表中，将没有结束的事务放入Undo列表
反向扫描日志，对于<T,x,v,w>，若T在Undo列表中，则 Write(x,v); Output(x)
正向扫描日志，对于<T,x,v,w>，若T在Redo列表中，则 Write(x,w)； Output(x)
对于Undo列表中的T，写入<abort,T>
