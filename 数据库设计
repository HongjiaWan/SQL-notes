函数依赖:
是指一个关系模式中一个属性集和另一个属性集间的多对一关系 
例如选课关系SC(S#, C#, Score) 存在由属性集{S#, C#}到属性集{Score}的函数依赖

平凡FD:
 X→Y，且Y < X，则X→Y是平凡FD，否则是不平凡FD
平凡FD没有什么实际意义，消除平凡FD是缩小函数依赖集大小的一个简单方法

模式分解的三种准则： 
无损连接 若R分解为n(n>2)个关系模式，使用Chase方法判断是否无损连接 
若R分解为R1和R2，使用（R1 ^ R2） → （R1－R2）或（R1 ^ R2） → （R2－R1）判断 
保持函数依赖 
既无损连接，又保持函数依赖

范式：满足特定要求的模式 
不同级别的范式要求各不相同 范式可以作为衡量一个关系模式好坏的标准

规范化：将低一级范式的关系模式通过模式分解转换为高一级范式的关系模式集合的过程
5NF < 4NF < BCNF < 3NF < 2NF < 1NF

规范化过程：
对1NF模式投影，消除非主属性对码的局部函数依赖，产生2NF
对2NF模式投影，消除非主属性对码的传递函数依赖，产生3NF
对3NF模式投影，消除左边不是候选码的函数依赖，产生BCNF

以投影来分解 
以自然联接来重构

数据库设计步骤：
需求分析
概念设计
逻辑设计
物理设计
数据库实施
数据库运行与维护

ER模型(Entity-Relationship Model)
拓展：
弱实体：一个弱实体的存在必须以另一实体的存在为前提
一个公司的人事系统中，需要管理职工和职工的子女信息 子女是弱实体，职工是强实体

子类和超类：两个实体A和B并不相同，但实体A属于实体B，则A称为实体子类，B称为实体超类 
子类是超类的特殊化，超类是子类的一般化 
子类继承了超类的全部属性，因此子类的标识就是超类的标识
例如，研究生是学生的子类，经理是职工的子类

设计步骤：
（1）基本ER模型转换到关系模型
（2）扩展ER模型转换到关系模型
（3）关系数据库模式的规范化
范式越高，模式设计问题越少，但连接运算越多，查询效率越低 
如果应用对数据只是查询，没有更新操作，则非BCNF范式也不会带来实际影响
如果应用对数据更新操作较频繁，则要考虑高一级范式以避免数据不一致 
实际应用中一般以3NF为最高范式
（4）模式评价
功能评价：检查数据库模式是否支持用户所有的功能要求
性能评价：检查查询响应时间是否满足规定的需求
（5）模式修正
若功能不满足，则要增加关系模式或属性 
若性能不满足，则要考虑属性冗余或降低范式
 合并：若多个模式具有相同的主码，而应用主要是查询，则可合并，减少连接开销 
 分解：对模式进行必要的分解，以提高效率 
  水平分解 垂直分解
（6）物理设计
1、选择存取方法
存取方法的选择目的是加快数据存取的速度 
索引存取方法 聚簇存取方法 散列存取方法
2、设计数据库的存储结构
确定数据的存放位置 针对应用环境和DBMS特性，合理安排数据存储位置 
表和索引可考虑放在不同的磁盘上，使查询时可以并行读取 
日志文件和备份文件由于数据量大，而且只有恢复时使用，可放到磁带上
（7）数据库实施
（8）运行和维护
